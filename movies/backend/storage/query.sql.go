// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package storage

import (
	"context"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (title, year, runtime_min, genres)
VALUES ($1, $2, $3, $4) RETURNING id, created_at, title, year, runtime_min, genres, version
`

type CreateMovieParams struct {
	Title      string   `json:"title"`
	Year       int32    `json:"year"`
	RuntimeMin int32    `json:"runtimeMin"`
	Genres     []string `json:"genres"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, createMovie,
		arg.Title,
		arg.Year,
		arg.RuntimeMin,
		arg.Genres,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Title,
		&i.Year,
		&i.RuntimeMin,
		&i.Genres,
		&i.Version,
	)
	return i, err
}

const getMovie = `-- name: GetMovie :one
SELECT id, created_at, title, year, runtime_min, genres, version FROM movies
WHERE id = $1
`

func (q *Queries) GetMovie(ctx context.Context, id int64) (Movie, error) {
	row := q.db.QueryRow(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Title,
		&i.Year,
		&i.RuntimeMin,
		&i.Genres,
		&i.Version,
	)
	return i, err
}

const listMovies = `-- name: ListMovies :many
SELECT id, created_at, title, year, runtime_min, genres, version FROM movies
`

func (q *Queries) ListMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.Query(ctx, listMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Title,
			&i.Year,
			&i.RuntimeMin,
			&i.Genres,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :one
UPDATE movies
SET title = $2, year = $3, runtime_min = $4, genres = $5, version = version + 1
WHERE id = $1
RETURNING id, created_at, title, year, runtime_min, genres, version
`

type UpdateMovieParams struct {
	ID         int64    `json:"id"`
	Title      string   `json:"title"`
	Year       int32    `json:"year"`
	RuntimeMin int32    `json:"runtimeMin"`
	Genres     []string `json:"genres"`
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, updateMovie,
		arg.ID,
		arg.Title,
		arg.Year,
		arg.RuntimeMin,
		arg.Genres,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Title,
		&i.Year,
		&i.RuntimeMin,
		&i.Genres,
		&i.Version,
	)
	return i, err
}
